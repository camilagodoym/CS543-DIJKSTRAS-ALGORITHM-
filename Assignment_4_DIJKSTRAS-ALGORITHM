// Dijkstra shortest path.cpp : This file contains the 'main' function. 
/*
SUMMARY
let distance of start nVertex from start Vertex=0 -- example A-0
let distance of all other vertices from start = infinity

WHILE vertices remain unvisited
visit unvisited vertex with smallest known distance from start vertex
FOR each unvisited neighbour of the current nVertex
calculate the distance from start Vertex
If the calculated distance of this vertex is less than the know distance
Update shorttest distance
update previous nVertex with the current nVertex
end if
next unvisited neighbour
add the current nVertex o the list of visited vertices
end while
*/

#include <stdio.h>
#include <limits.h>
#include <string>
#include <iostream>
using namespace std;

// Number of vertices 
#define nVertex 5

int graph[nVertex][nVertex] = {
{0, 10, 0, 30, 100},
{10, 0, 50, 0, 0},
{0, 50, 0, 20, 10},
{30, 0, 20, 0, 60},
{100, 0, 10, 60, 0}
};

int visitedVertex(int distance[], bool visitState[])
{
    //let distance of all other vertices from start = infinity
    int minimum = INT_MAX, visitedNumber;

    for (int k = 0; k < nVertex; k++)
    {
        //if value on distance k position is smaller than the minimun position then, minPosition is the k value
        //visit state values is defined with previous minPosition value from last loop.
        //this funtion helps define what neighbors were visited
        if (visitState[k] == false && distance[k] <= minimum)
        {
            minimum = distance[k];
            visitedNumber = k;
            //cout << " Current visited: " << distance[k]<< endl;
        }
    }
    return visitedNumber;
}


// calculates the shortest path from source to j
void printPath(int path[], int j)
{
    // Base Case : If j is source
    if (path[j] > -1) {
        printPath(path, path[j]);
    }
    printf("%d ", j);
}



void dijkstraAlgorithm(int graph[nVertex][nVertex], int startingNode, int endNode)
{

    //Init
    int distance[nVertex]; // array to calculate the distance for each node            
    bool visitState[nVertex];// boolean array to mark visited and unvisited for each node
    int path[nVertex];

    for (int k = 0; k < nVertex; k++)
    {
        path[0] = -1;
        distance[k] = INT_MAX;// all distances set to infinity
        visitState[k] = false;//visted is false
    }
    ///visitState = {false,false,false,false,false}
    // Distance of source vertex 
    // from itself is always 0

    distance[startingNode] = 0; // set distance on starting node position node to 0

    // Find shortest path
    // for all vertices
    for (int h = 0; h < nVertex; h++)
    {
        int m = visitedVertex(distance, visitState);// m reveives position of vertex that is about to be visited.
        char vertexName = m + 65;//node name
        visitState[m] = true;//set visit state to true on M position to define visit state
        // m=2 {true,true,false, false, false}

        for (int j = 0; j < nVertex; j++) /*CHANGED from k*/
        {

            // updating the distance of  Vertex
            //if visit state of a note is false and
            //graph with smallest visit value and
            // distance is of the value is not infinity
            //distance and value of the smallest number path compared to the previous path
            if (visitState[j] == 0 && graph[m][j] && distance[m] != INT_MAX && distance[m] + graph[m][j] < distance[j])
            {
                //array Distance in position K will receives the sum of [distance found on vertex position] + graph value
                path[j] = m;
                distance[j] = distance[m] + graph[m][j];


            }
        }
    }

    cout << "" << endl;
    cout << "Result:" << endl;

    for (int k = 0; k < nVertex; k++)
    {
        char str = 65 + k;//making ABCD nodes
        char sNode = 65 + startingNode;
        char eNode = 65 + endNode;
        //printPath(path, k);

        if (str == eNode) {
            cout << "Minimun Distance from Starting Node " << sNode << " to Vertex  " << str << " is :  " <<
                distance[k] << " path is : "; printPath(path, k);
            cout << "" << endl;
        }
    }

}

// Driver Code
int main()
{
    int startingNode, endNode;

    cout << "Choose Starting Node: 0 for A, 1 for B, 2 for C, 3 for D, 4 for E" << endl;
    cin >> startingNode;
    cout << "" << endl;
    cout << "Choose End Node: 0 for A, 1 for B, 2 for C, 3 for D, 4 for E" << endl;
    cin >> endNode;


    dijkstraAlgorithm(graph, startingNode, endNode);
    return 0;
}
